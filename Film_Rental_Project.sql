-- 1. What is the total revenue generated from all rentals in the database? (2 Marks)
USE FILM_RENTAL;
SELECT * FROM PAYMENT;

SELECT SUM(AMOUNT) AS REVENUE FROM PAYMENT;

-- 2. How many rentals were made in each month_name? (2 Marks)
SELECT * FROM RENTAL;

WITH CTE AS
(SELECT RENTAL_ID,MONTHNAME(RENTAL_DATE) AS MONTH_NAME FROM RENTAL)
SELECT MONTH_NAME,COUNT(RENTAL_ID) AS RENTAL_COUNT FROM CTE GROUP BY MONTH_NAME; 

-- 3. What is the rental rate of the film with the longest title in the database? (2 Marks)
SELECT * FROM FILM;

WITH CTE AS
(SELECT FILM_ID,TITLE,RENTAL_RATE,char_length(TITLE) AS LEN FROM FILM)
SELECT FILM_ID,TITLE,LEN,RENTAL_RATE FROM CTE WHERE LEN=(SELECT MAX(LEN) FROM CTE);


-- 4. What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? (2 Marks)
SET @A:= '2005-05-05 22:04:30' + INTERVAL 30 DAY;

WITH CTE AS
(SELECT FILM_ID
FROM RENTAL AS R LEFT JOIN INVENTORY AS I USING(INVENTORY_ID)
WHERE RENTAL_DATE BETWEEN '2005-05-05 22:04:30' AND (SELECT @A))
SELECT AVG(RENTAL_RATE) FROM FILM AS F, CTE WHERE F.FILM_ID=CTE.FILM_ID;

SELECT AVG(RENTAL_RATE)
FROM RENTAL AS R LEFT JOIN INVENTORY AS I USING(INVENTORY_ID) 
LEFT JOIN FILM AS F USING(FILM_ID)
WHERE RENTAL_DATE BETWEEN '2005-05-05 22:04:30' AND (SELECT @A);

-- 5. What is the most popular category of films in terms of the number of rentals? (3 Marks)
-- MY INFERENCE: COUNT OF RENTAL DURATION FOR A CATEGORY

SELECT * FROM CATEGORY; 
SELECT * FROM FILM_CATEGORY;

WITH CTE AS
(SELECT CD.CATEGORY_ID,NAME,COUNT(RENTAL_DURATION) AS NO_OF_RENTALS
FROM CATEGORY AS CD LEFT JOIN  FILM_CATEGORY AS FC
USING (CATEGORY_ID) LEFT JOIN FILM AS F
USING(FILM_ID) GROUP BY 1)
SELECT * FROM CTE WHERE NO_OF_RENTALS=(SELECT MAX(NO_OF_RENTALS) FROM CTE);

WITH CTE AS
(SELECT CATEGORY_ID,COUNT(RENTAL_DURATION) AS RENT FROM FILM_CATEGORY LEFT JOIN FILM USING(FILM_ID) GROUP BY 1)
SELECT NAME FROM CATEGORY AS C,CTE WHERE CTE.CATEGORY_ID=C.CATEGORY_ID AND RENT=(SELECT MAX(RENT) FROM CTE); 

-- 6. Find the longest movie duration from the list of films that have not been rented by any customer. (3 Marks)
-- ASSUMING LENGTH IS THE MOVIE DURATION

SELECT * FROM CUSTOMER;
SELECT * FROM INVENTORY;

WITH CTE AS 
(SELECT TITLE,LENGTH FROM FILM LEFT JOIN INVENTORY USING(FILM_ID) LEFT JOIN RENTAL USING(INVENTORY_ID) WHERE INVENTORY_ID IS NULL)
SELECT * FROM CTE WHERE LENGTH=(SELECT MAX(LENGTH) FROM CTE);

WITH CTE AS
(SELECT TITLE,LENGTH
FROM FILM
WHERE FILM_ID NOT IN (SELECT DISTINCT FILM_ID FROM INVENTORY LEFT JOIN RENTAL USING(INVENTORY_ID)))
SELECT * FROM CTE WHERE LENGTH=(SELECT MAX(LENGTH) FROM CTE);

-- 7. What is the average rental rate for films, broken down by category? (3 Marks)

SELECT DISTINCT CATEGORY_ID,NAME,AVG(RENTAL_RATE) OVER(PARTITION BY NAME) AS RENTAL_RATE_AVG
FROM CATEGORY AS C LEFT JOIN FILM_CATEGORY AS FC USING(CATEGORY_ID)
LEFT JOIN FILM AS F USING(FILM_ID);

-- 8. What is the total revenue generated from rentals for each actor in the database? (3 Marks)
SELECT * FROM ACTOR; 
SELECT * FROM FILM_ACTOR;

SELECT A.ACTOR_ID,FIRST_NAME,LAST_NAME,SUM(AMOUNT) AS REVENUE
FROM ACTOR AS A LEFT JOIN FILM_ACTOR AS FM USING (ACTOR_ID) LEFT JOIN FILM AS F USING (FILM_ID)
LEFT JOIN INVENTORY AS I USING (FILM_ID) LEFT JOIN RENTAL USING (INVENTORY_ID)
LEFT JOIN PAYMENT USING(RENTAL_ID) GROUP BY A.ACTOR_ID;

-- 9. Show all the actresses who worked in a film having a "Wrestler" in the description. (3 Marks)

WITH CTE1 AS
(WITH CTE AS
(SELECT FILM_ID FROM FILM WHERE DESCRIPTION LIKE '%WRESTLER%')
SELECT DISTINCT ACTOR_ID FROM CTE,FILM_ACTOR AS FM WHERE FM.FILM_ID=CTE.FILM_ID)
SELECT A.ACTOR_ID,FIRST_NAME,LAST_NAME FROM CTE1,ACTOR AS A WHERE A.ACTOR_ID=CTE1.ACTOR_ID;

SELECT DISTINCT A.ACTOR_ID,FIRST_NAME,LAST_NAME FROM ACTOR AS A LEFT JOIN FILM_ACTOR AS FM USING(ACTOR_ID)
LEFT JOIN FILM AS F USING (FILM_ID) WHERE DESCRIPTION LIKE '%WRESTLER%';

-- 10. Which customers have rented the same film more than once? (3 Marks)

SELECT * FROM RENTAL;
SELECT * FROM CUSTOMER;


SELECT C.CUSTOMER_ID,FIRST_NAME,LAST_NAME,F.FILM_ID,COUNT(*)
FROM CUSTOMER AS C LEFT JOIN RENTAL AS R USING (CUSTOMER_ID)
LEFT JOIN INVENTORY AS I USING (INVENTORY_ID)
LEFT JOIN FILM AS F USING (FILM_ID) GROUP BY 1,2,3,4 HAVING COUNT(*)>=2;

-- 11. How many films in the comedy category have a rental rate higher than the average rental rate? (3 Marks)

SELECT * FROM CATEGORY;

WITH CTE1 AS
(WITH CTE AS
(SELECT FILM_ID FROM CATEGORY AS C LEFT JOIN FILM_CATEGORY AS FC USING (CATEGORY_ID)
WHERE NAME LIKE 'COMEDY')
SELECT TITLE,RENTAL_RATE FROM CTE,FILM AS F WHERE CTE.FILM_ID=F.FILM_ID AND RENTAL_RATE>(SELECT AVG(RENTAL_RATE) FROM FILM))
SELECT COUNT(*) AS FILM_COMEDY FROM CTE1;

-- 12. Which films have been rented the most by customers living in each city? (3 Marks) 
-- THERE ARE LOT OF FILMS IN EACH CITY WITH ONLY ONE RENTALS...

WITH CTE1 AS
(WITH CTE AS
(SELECT CITY,TITLE,COUNT(*) AS COUNT_FILM
FROM CITY LEFT JOIN ADDRESS USING(CITY_ID)
LEFT JOIN CUSTOMER USING(ADDRESS_ID)
LEFT JOIN RENTAL USING(CUSTOMER_ID)
LEFT JOIN INVENTORY USING(INVENTORY_ID)
LEFT JOIN FILM USING(FILM_ID) GROUP BY 1,2)
SELECT *,DENSE_RANK() OVER(PARTITION BY CITY ORDER BY COUNT_FILM DESC) AS RANK1 FROM CTE)
SELECT * FROM CTE1 WHERE RANK1=1 ORDER BY COUNT_FILM DESC;

-- 13. What is the total amount spent by customers whose rental payments exceed $200? (3 Marks)

SELECT CUSTOMER_ID,SUM(AMOUNT) AS TOTAL_AMOUNT FROM PAYMENT GROUP BY 1 HAVING SUM(AMOUNT)>=200;

-- 14. Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] (2 Marks)

DESCRIBE RENTAL;

SELECT COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE TABLE_SCHEMA = 'FILM_RENTAL'
  AND TABLE_NAME = 'RENTAL' AND CONSTRAINT_NAME LIKE '%FK%';

-- 15. Create a View for the total revenue generated by each staff member, broken down by store city with the country name. (4 Marks)

CREATE VIEW STAFF_REVENUE AS
SELECT S.STAFF_ID,FIRST_NAME,LAST_NAME,CITY,COUNTRY,SUM(AMOUNT) FROM PAYMENT AS P LEFT JOIN STAFF AS S USING (STAFF_ID)
LEFT JOIN ADDRESS AS A USING (ADDRESS_ID) LEFT JOIN CITY AS C USING (CITY_ID)
LEFT JOIN COUNTRY AS CO USING (COUNTRY_ID) GROUP BY 1;

SELECT * FROM STAFF_REVENUE;

-- 16. Create a view based on rental information consisting of visiting_day, customer_name, 
-- the title of the film, no_of_rental_days, the amount paid by the customer along with the percentage of customer spending. (4 Marks)

CREATE VIEW RENTAL_DETAILS AS
SELECT DATE(R.RENTAL_DATE) AS VISTING_DAY,
    CONCAT_WS(' ', C.FIRST_NAME,C.LAST_NAME) AS CUSTOMER_NAME,F.TITLE AS FILM_TITLE,
    DATEDIFF(R.RETURN_DATE,R.RENTAL_DATE) AS NO_OF_RENTAL_DAYS,AMOUNT,
    (P.AMOUNT / (SELECT SUM(AMOUNT) FROM PAYMENT) * 100) AS CUSTOMER_SPENDING
FROM RENTAL AS R
JOIN CUSTOMER AS C USING (CUSTOMER_ID)
JOIN INVENTORY AS I USING(INVENTORY_ID)
JOIN FILM AS F USING(FILM_ID)
JOIN PAYMENT AS P USING(RENTAL_ID);

SELECT * FROM RENTAL_DETAILS;


-- 17. Display the customers who paid 50% of their total rental costs within one day. (5 Marks)

WITH CTE AS
(SELECT C.CUSTOMER_ID,AMOUNT,PAYMENT_DATE,CUSTOMER_TOTAL,
SUM(AMOUNT) OVER(PARTITION BY C.CUSTOMER_ID,DATE(PAYMENT_DATE)) AS ONE_DAY_PAYMENT
FROM CUSTOMER C
JOIN RENTAL R USING(CUSTOMER_ID)
JOIN PAYMENT P USING(RENTAL_ID)
JOIN (SELECT CUSTOMER_ID,SUM(AMOUNT) AS CUSTOMER_TOTAL FROM PAYMENT GROUP BY 1) AS A ON P.CUSTOMER_ID=A.CUSTOMER_ID)
SELECT * FROM CTE WHERE ONE_DAY_PAYMENT >= CUSTOMER_TOTAL/2;

WITH CTE AS
(SELECT FILM_ID,RENTAL_DURATION,RENTAL_RATE,RENTAL_DATE,PAYMENT_DATE,RENTAL_ID,C.CUSTOMER_ID,
RENTAL_DURATION*RENTAL_RATE AS TOTAL_PAYABLE,AMOUNT,
AMOUNT/(RENTAL_DURATION*RENTAL_RATE)*100 AS PERCENTAGE_PAID
FROM FILM JOIN INVENTORY USING (FILM_ID)
JOIN RENTAL USING (INVENTORY_ID)
JOIN CUSTOMER AS C USING (CUSTOMER_ID) 
JOIN PAYMENT USING (RENTAL_ID))
SELECT CUSTOMER_ID,RENTAL_ID FROM CTE WHERE PERCENTAGE_PAID=50;

WITH CTE AS
(SELECT FILM_ID,RENTAL_DURATION,RENTAL_RATE,RENTAL_DATE,PAYMENT_DATE,RENTAL_ID,C.CUSTOMER_ID,
RENTAL_DURATION*RENTAL_RATE AS TOTAL_PAYABLE,AMOUNT,
AMOUNT/(RENTAL_DURATION*RENTAL_RATE)*100 AS PERCENTAGE_PAID
FROM FILM JOIN INVENTORY USING (FILM_ID)
JOIN RENTAL USING (INVENTORY_ID)
JOIN CUSTOMER AS C USING (CUSTOMER_ID) 
JOIN PAYMENT USING (RENTAL_ID))
SELECT CUSTOMER_ID,RENTAL_ID FROM CTE WHERE PERCENTAGE_PAID>=50;